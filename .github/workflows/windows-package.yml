name: Windows package (jlink + jpackage)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

jobs:
  build-and-package:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Chocolatey packages
        id: choco-cache
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-wixtoolset-v1

      - name: Install WiX (for MSI)
        if: steps.choco-cache.outputs.cache-hit != 'true'
        run: choco install wixtoolset -y 

      - name: Install local JARs from jar/
        shell: pwsh
        run: |
          if (Test-Path "jar") {
            Write-Host "Found jar/ directory. Installing local JARs to Maven local repository..."
            Get-ChildItem -Path jar -Filter "*.jar" | ForEach-Object {
              $name = $_.BaseName.ToLower()
              if ($name -like '*update4j*') {
                Write-Host "Skipping installation of $($_.Name) (update4j is resolved from Maven Central)"
              } else {
                Write-Host "Installing $($_.FullName)"
                & mvn install:install-file -Dfile="$($_.FullName)" -DgroupId="local.jars" -DartifactId="$($_.BaseName)" -Dversion="1.0.0-local" -Dpackaging=jar
              }
            }
          } else {
            Write-Host "No jar/ directory found; skipping local JAR install."
          }

      - name: Build with Maven
        run: mvn -DskipTests package

      - name: Prepare app jar artifact
        shell: pwsh
        run: |
          $latestJar = Get-ChildItem -Path target -Filter "*.jar" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $latestJar) { throw "No jar found in target/" }
          New-Item -ItemType Directory -Force -Path app-out | Out-Null
          Copy-Item $latestJar.FullName app-out/app.jar -Force

      - name: Upload app jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app-out/app.jar

      - name: Run packaging script for ${{ matrix.arch }}
        run: pwsh scripts\package-windows.ps1 -AppVersion ${{ github.ref_name }} -JfxVersion 21 -Arch ${{ matrix.arch }}

      - name: Code sign MSI (optional)
        shell: pwsh
        env:
          WINDOWS_PFX: ${{ secrets.WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          TIMESTAMP_URL: http://timestamp.digicert.com
        run: |
          if (-not $env:WINDOWS_PFX -or -not $env:WINDOWS_PFX_PASSWORD) {
            Write-Host "Signing skipped: WINDOWS_PFX or WINDOWS_PFX_PASSWORD not set."
            exit 0
          }

          $pfxPath = "code-signing.pfx"
          Write-Host "Writing PFX from secret to $pfxPath"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($env:WINDOWS_PFX))

          $signtool = "signtool.exe"
          Write-Host "Looking for MSI files in dist/${{ matrix.arch }}"
          $msis = Get-ChildItem -Path "dist/${{ matrix.arch }}" -Filter *.msi -File -Recurse
          if (-not $msis) { throw "No MSI files found to sign in dist/${{ matrix.arch }}" }

          foreach ($m in $msis) {
            Write-Host "Signing $($m.FullName)"
            & $signtool sign /f $pfxPath /p $env:WINDOWS_PFX_PASSWORD /fd SHA256 /tr $env:TIMESTAMP_URL /td SHA256 "$($m.FullName)"
            if ($LASTEXITCODE -ne 0) { throw "signtool sign failed for $($m.Name)" }
            Write-Host "Verifying signature for $($m.FullName)"
            & $signtool verify /pa /v "$($m.FullName)"
          }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: package project
        run: mvn package

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Normalize MSI filenames
        run: |
          set -e
          mkdir -p artifacts/normalized
          TAG_NAME="${{ github.ref_name }}"
          MSI_SRC=$(find artifacts/installer-x64 -name '*.msi' -print -quit)
          if [ -z "$MSI_SRC" ]; then echo "ERROR: No MSI found" >&2; exit 1; fi
          
          cp "$MSI_SRC" "artifacts/normalized/Print-${TAG_NAME}.msi"
          cp "$MSI_SRC" "artifacts/normalized/Print-latest.msi"

      - name: Generate update4j config.xml
        run: |
          mkdir -p release-out
          BASE_URI="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/"
          
          # Pega o JAR do uber-jar criado pelo build, que já está aqui por causa do checkout
          APP_JAR_PATH=$(find target -name '*-jar-with-dependencies.jar' -print -quit)
          if [ -z "$APP_JAR_PATH" ]; then APP_JAR_PATH=$(find target -name '*.jar' -print -quit); fi
          if [ -z "$APP_JAR_PATH" ]; then echo "ERROR: No JAR found in target/" >&2; exit 1; fi

          mvn -e -DskipTests exec:java \
            -Dexec.mainClass=geraConfig.GenerateUpdateConfig \
            -Dexec.classpathScope=runtime \
            -Dexec.args="$BASE_URI $APP_JAR_PATH test.Program release-out/config.xml"
          
          # Ensure the application JAR is uploaded with a stable name 'app.jar'
          # Copy the discovered APP_JAR_PATH into release-out/app.jar so it will be attached to the release
          if [ -z "$APP_JAR_PATH" ]; then echo "ERROR: APP_JAR_PATH empty after GenerateUpdateConfig" >&2; exit 1; fi
          cp "$APP_JAR_PATH" release-out/app.jar

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body: |
            # Lançamento ${{ github.ref_name }}
            Para instalar o programa, baixe o instalador `.msi` na seção **Assets** logo abaixo. Requer Windows 64-bit.
          files: |
            artifacts/normalized/*.msi
            release-out/config.xml
            release-out/app.jar