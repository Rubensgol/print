name: Windows package (jlink + jpackage)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

jobs:
  build-and-package:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Chocolatey packages
        id: choco-cache
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-wixtoolset-v1

      - name: Install WiX (for MSI)
        if: steps.choco-cache.outputs.cache-hit != 'true'
        run: choco install wixtoolset -y 

      - name: Install local JARs from jar/
        shell: pwsh
        run: |
          if (Test-Path "jar") {
            Write-Host "Found jar/ directory. Installing local JARs to Maven local repository..."
            Get-ChildItem -Path jar -Filter "*.jar" | ForEach-Object {
              $name = $_.BaseName.ToLower()
              if ($name -like '*update4j*') {
                Write-Host "Skipping installation of $($_.Name) (update4j is resolved from Maven Central)"
              } else {
                Write-Host "Installing $($_.FullName)"
                & mvn install:install-file -Dfile="$($_.FullName)" -DgroupId="local.jars" -DartifactId="$($_.BaseName)" -Dversion="1.0.0-local" -Dpackaging=jar
              }
            }
          } else {
            Write-Host "No jar/ directory found; skipping local JAR install."
          }

      - name: Build with Maven
        run: mvn -DskipTests package

      - name: Run packaging script for ${{ matrix.arch }}
        run: pwsh scripts\package-windows.ps1 -AppVersion ${{ github.ref_name }} -JfxVersion 21 -Arch ${{ matrix.arch }}

      - name: Code sign MSI (optional)
        if: ${{ env.WINDOWS_PFX && env.WINDOWS_PFX_PASSWORD }}
        shell: pwsh
        env:
          WINDOWS_PFX: ${{ secrets.WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          TIMESTAMP_URL: http://timestamp.digicert.com
        run: |
          $pfxPath = "code-signing.pfx"
          Write-Host "Writing PFX from secret to $pfxPath"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($env:WINDOWS_PFX))

          $signtool = "signtool.exe"
          Write-Host "Looking for MSI files in dist/${{ matrix.arch }}"
          $msis = Get-ChildItem -Path "dist/${{ matrix.arch }}" -Filter *.msi -File -Recurse
          if (-not $msis) { throw "No MSI files found to sign in dist/${{ matrix.arch }}" }

          foreach ($m in $msis) {
            Write-Host "Signing $($m.FullName)"
            & $signtool sign /f $pfxPath /p $env:WINDOWS_PFX_PASSWORD /fd SHA256 /tr $env:TIMESTAMP_URL /td SHA256 "$($m.FullName)"
            if ($LASTEXITCODE -ne 0) { throw "signtool sign failed for $($m.Name)" }
            Write-Host "Verifying signature for $($m.FullName)"
            & $signtool verify /pa /v "$($m.FullName)"
          }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body: |
            # Lançamento ${{ github.ref_name }}

            Para instalar o programa, por favor, baixe o instalador `.msi` na seção **Assets** logo abaixo. Requer Windows 64-bit.
          files: |
            artifacts/installer-x64/*.msi